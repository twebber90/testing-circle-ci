version: 2
jobs:
  build:
    working_directory: ~/testing-circle-ci
    docker:
      - image: circleci/node:10.16.3
      - image: mongo:4.2.0
    steps:
      - checkout # special step to check out source code to working directory
      - run:
          name: update_npm_version
          command: 'sudo npm install -g npm@latest'
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install_npm_modules
          command: npm ci
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: build_app
          command: npm run build
      - persist_to_workspace:
          root: build
          paths:
            - app

  test:
    docker:
      - image: circleci/node:10.16.3
      - image: mongo:4.2.0
    steps:
      - checkout # special step to check out source code to working directory
      - run:
          name: unit_test
          command: npm run test
      # - run: # run coverage report
      #    name: code-coverage
      #    command: './node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: test-results.xml
          prefix: tests
      # - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
      #     path: coverage
      #     prefix: coverage
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results.xml

  check_terraform:
    docker:
      - image: hashicorp/terraform
      - image: mongo:4.2.0
    steps:
      - checkout # special step to check out source code to working directory
      - run:
          name: initialize_terraform
          command: terraform init terraform
      - run:
          name: run_terraform_plan
          command: terraform plan -var="aws_access_key=$TF_VAR_AWS_KEY" -var="aws_secret_key=$TF_VAR_AWS_SECRET" -var-file="terraform/env_vars/dev.tfvars" terraform

  deploy_infrastructure_dev:
    docker:
      - image: hashicorp/terraform
      - image: mongo:4.2.0
    steps:
      - run:
          name: initialize_terraform
          command: terraform init terraform
      - run:
          name: run_terraform_apply
          command: echo "Command to apply -> terraform apply -var=\"aws_access_key=$TF_VAR_AWS_KEY\" -var=\"aws_secret_key=$TF_VAR_AWS_SECRET\"  -var-file=\"terraform/env_vars/dev.tfvars\" -auto-approve"

  deploy_code_dev:
    docker:
      - image: infrastructureascode/aws-cli
      - image: mongo:4.2.0
    steps:
      - run:
          name: get_certificates
          command: apk add --no-cache ca-certificates
      - attach_workspace:
          at: ~/testing-circle-ci/build
      - run:
          name: copy_code_to_s3
          command: echo "Command to copy -> aws s3 cp app s3://iron-comps-frontend-dev/ --recursive"

  run_acceptance_tests:
    docker:
      - image: cypress/base
      - image: mongo:4.2.0
    steps:
      - run:
          name: deploy-to-aws
          command: echo "Run Acceptance Tests against deployed environment to act as gate to prod"

  deploy_infrastructure_prod:
    docker:
      - image: hashicorp/terraform
      - image: mongo:4.2.0
    steps:
      - run:
          name: initialize_terraform
          command: terraform init terraform
      - run:
          name: run_terraform_apply
          command: echo "Command to apply -> terraform apply -var=\"aws_access_key=$TF_VAR_AWS_KEY\" -var=\"aws_secret_key=$TF_VAR_AWS_SECRET\"  -var-file=\"terraform/env_vars/prod.tfvars\" -auto-approve"

  deploy_code_prod:
    docker:
      - image: infrastructureascode/aws-cli
      - image: mongo:4.2.0
    steps:
      - attach_workspace:
          at: ~/testing-circle-ci/build
      - run:
          name: copy_code_to_s3
          command: echo "Command to copy -> aws s3 cp app s3://iron-comps-frontend-prod/ --recursive"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - check_terraform:
          requires:
            - test
      - deploy_infrastructure_dev:
          requires:
            - check_terraform
          filters:
            branches:
              only: master
      - deploy_code_dev:
          requires:
            - deploy_infrastructure_dev
      - run_acceptance_tests:
          requires:
            - deploy_code_dev
      - deploy_infrastructure_prod:
          requires:
            - run_acceptance_tests
      - deploy_code_prod:
          requires:
            - deploy_infrastructure_prod